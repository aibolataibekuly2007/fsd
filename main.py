import streamlit as st
import json
from pathlib import Path
import sys
import os
from functools import reduce
import time

# set_page_config –î–û–õ–ñ–ï–ù –±—ã—Ç—å –ø–µ—Ä–≤—ã–º –≤—ã–∑–æ–≤–æ–º Streamlit
st.set_page_config(
    page_title="Food Delivery Optimizer",
    layout="wide",
    page_icon="üçï"
)

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã –Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–±–ª–µ–º —Å –∏–º–ø–æ—Ä—Ç–æ–º
from dataclasses import dataclass
from typing import Tuple, Dict, Any
import hashlib


@dataclass(frozen=True)
class Restaurant:
    id: str
    name: str
    zone: str


@dataclass(frozen=True)
class Order:
    id: str
    rest_id: str
    items: Tuple[Tuple[str, int], ...]  # –î–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º tuple –≤–º–µ—Å—Ç–æ list
    total: int
    ts: str
    status: str

    def __hash__(self):
        # –°–æ–∑–¥–∞–µ–º —Ö–µ—à –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã—Ö –ø–æ–ª–µ–π
        return hash((self.id, self.rest_id, self.items, self.total, self.ts, self.status))


@dataclass(frozen=True)
class Courier:
    id: str
    name: str
    vehicle: str
    zone: str

    def __hash__(self):
        return hash((self.id, self.name, self.vehicle, self.zone))


@dataclass(frozen=True)
class Slot:
    id: str
    courier_id: str
    start: str
    end: str


@dataclass(frozen=True)
class Route:
    id: str
    courier_id: str
    orders: Tuple[str, ...]
    distance: int
    duration: int


# –ü—Ä–æ—Å—Ç–æ–π —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç–∞–≤–∫–∏
class DeliveryService:
    def __init__(self, orders: Tuple[Order, ...], slots: Tuple[Slot, ...]):
        self.orders = orders
        self.slots = slots

    def place_order(self, order: Order) -> 'DeliveryService':
        new_orders = self.orders + (order,)
        return DeliveryService(new_orders, self.slots)

    def assign_courier_slot(self, slot: Slot) -> 'DeliveryService':
        new_slots = self.slots + (slot,)
        return DeliveryService(self.orders, new_slots)

    def get_revenue(self) -> int:
        return reduce(lambda acc, order: acc + order.total, self.orders, 0)

    def get_orders_by_status(self, status: str) -> Tuple[Order, ...]:
        return tuple(filter(lambda o: o.status == status, self.orders))


# –§—É–Ω–∫—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–õ–∞–±–∞ 2)
def by_restaurant(rest_id: str):
    def filter_func(order: Order) -> bool:
        return order.rest_id == rest_id

    return filter_func


def by_zone(zone: str):
    def filter_func(restaurant: Restaurant) -> bool:
        return restaurant.zone == zone

    return filter_func


def by_price_range(min_price: int, max_price: int):
    def filter_func(order: Order) -> bool:
        return min_price <= order.total / 100 <= max_price

    return filter_func


def by_time_range(start: str, end: str):
    def filter_func(order: Order) -> bool:
        return start <= order.ts <= end

    return filter_func


# –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–õ–∞–±–∞ 2)
def split_route(route: Route) -> Tuple[str, ...]:
    def _split_recursive(orders: Tuple[str, ...], acc: Tuple[str, ...]) -> Tuple[str, ...]:
        if not orders:
            return acc
        current = f"Order {orders[0]} -> Courier {route.courier_id}"
        return _split_recursive(orders[1:], acc + (current,))

    return _split_recursive(route.orders, ())


def collect_orders_by_zone(orders: Tuple[Order, ...], restaurants: Tuple[Restaurant, ...], zone: str) -> Tuple[
    Order, ...]:
    def _collect_recursive(remaining_orders: Tuple[Order, ...], acc: Tuple[Order, ...]) -> Tuple[Order, ...]:
        if not remaining_orders:
            return acc
        current_order = remaining_orders[0]
        restaurant = next((r for r in restaurants if r.id == current_order.rest_id), None)
        if restaurant and restaurant.zone == zone:
            return _collect_recursive(remaining_orders[1:], acc + (current_order,))
        return _collect_recursive(remaining_orders[1:], acc)

    return _collect_recursive(orders, ())


# –ú–µ–º–æ–∏–∑–∞—Ü–∏—è (–õ–∞–±–∞ 3) - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
from functools import lru_cache


@lru_cache(maxsize=128)
def compute_route_cost_cached(route_id: str, order_ids: Tuple[str, ...], courier_ids: Tuple[str, ...]) -> Dict[
    str, Any]:
    """–î–æ—Ä–æ–≥–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–∞—Ä—à—Ä—É—Ç–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    time.sleep(0.5)  # –ò–º–∏—Ç–∞—Ü–∏—è —Å–ª–æ–∂–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π

    total_orders = len(order_ids)
    total_distance = sum(len(order_id) * 2 for order_id in order_ids)
    total_duration = sum(len(order_id) for order_id in order_ids) * 3
    base_cost = total_orders * 100

    # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    cost = base_cost + total_distance * 2 + total_duration * 5

    return {
        "distance": total_distance,
        "duration": total_duration,
        "cost": cost,
        "orders_count": total_orders,
        "route_id": route_id
    }


def compute_route_cost(route_id: str, orders: Tuple[Order, ...], couriers: Tuple[Courier, ...]) -> Dict[str, Any]:
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ Order –∏ Courier"""
    order_ids = tuple(order.id for order in orders)
    courier_ids = tuple(courier.id for courier in couriers)
    return compute_route_cost_cached(route_id, order_ids, courier_ids)


def measure_performance(route_id: str, orders: Tuple[Order, ...], couriers: Tuple[Courier, ...]):
    """–ó–∞–º–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–æ/–ø–æ—Å–ª–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
    compute_route_cost_cached.cache_clear()

    # –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ (–±–µ–∑ –∫—ç—à–∞)
    start = time.time()
    result1 = compute_route_cost(route_id, orders, couriers)
    time1 = time.time() - start

    # –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ (—Å –∫—ç—à–µ–º)
    start = time.time()
    result2 = compute_route_cost(route_id, orders, couriers)
    time2 = time.time() - start

    return {
        "first_call_time": time1,
        "cached_call_time": time2,
        "speedup": time1 / time2 if time2 > 0 else 0,
        "result": result1
    }


# Functional Types (–õ–∞–±–∞ 4)
class Maybe:
    @classmethod
    def just(cls, value):
        return Just(value)

    @classmethod
    def nothing(cls):
        return Nothing()


class Just(Maybe):
    def __init__(self, value):
        self.value = value

    def is_just(self):
        return True

    def is_nothing(self):
        return False


class Nothing(Maybe):
    def is_just(self):
        return False

    def is_nothing(self):
        return True


class Either:
    @classmethod
    def right(cls, value):
        return Right(value)

    @classmethod
    def left(cls, error):
        return Left(error)


class Right(Either):
    def __init__(self, value):
        self.value = value

    def is_right(self):
        return True

    def is_left(self):
        return False


class Left(Either):
    def __init__(self, error):
        self.error = error

    def is_right(self):
        return False

    def is_left(self):
        return True


def safe_order(orders: tuple, oid: str) -> Maybe:
    order = next((o for o in orders if o.id == oid), None)
    return Maybe.just(order) if order else Maybe.nothing()


def validate_order(order, rules: tuple, couriers: tuple) -> Either:
    if order.total > 10000:
        return Either.left({"error": "Order too expensive"})
    return Either.right(order)


def assign_courier(order, courier) -> Either:
    if order.total > 5000 and courier.vehicle == "bike":
        return Either.left({"error": "Heavy order cannot be delivered by bike"})
    return Either.right(order)


def load_seed(data: dict) -> tuple:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º list –≤ tuple"""
    restaurants = tuple(Restaurant(**r) for r in data.get('restaurants', []))

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º items –∏–∑ list –≤ tuple –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
    orders_data = []
    for o in data.get('orders', []):
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å–ø–∏—Å–∫–∏ –≤ tuple
        items_tuple = tuple(tuple(item) for item in o['items'])
        order = Order(
            id=o['id'],
            rest_id=o['rest_id'],
            items=items_tuple,
            total=o['total'],
            ts=o['ts'],
            status=o['status']
        )
        orders_data.append(order)
    orders = tuple(orders_data)

    couriers = tuple(Courier(**c) for c in data.get('couriers', []))
    slots = tuple(Slot(**s) for s in data.get('slots', []))
    return restaurants, orders, couriers, slots


def load_data():
    """Load seed data from file"""
    try:
        seed_path = Path(__file__).parent.parent / "data" / "seed.json"
        with open(seed_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        return load_seed(data)
    except Exception as e:
        st.error(f"Data loading error: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        return (
            (Restaurant("r1", "Test Restaurant", "center"),),
            (Order("o1", "r1", (("m1", 1),), 1000, "2024-01-15 10:00:00", "delivered"),),
            (Courier("c1", "Test Courier", "bike", "center"),),
            (Slot("s1", "c1", "10:00", "12:00"),)
        )


def show_overview(restaurants, orders, couriers, service):
    st.title("üöö Food Delivery Optimization System")

    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.metric("üè¢ Restaurants", len(restaurants))
    with col2:
        st.metric("üì¶ Orders", len(orders))
    with col3:
        st.metric("üö¥ Couriers", len(couriers))
    with col4:
        st.metric("üí∞ Revenue", f"${service.get_revenue() / 100:.2f}")

    st.subheader("System Overview")
    st.write("""
    This system optimizes food delivery operations using **functional programming principles**:

    - üßä **Immutable data structures**
    - üîÑ **Pure functions** 
    - üéØ **Higher-order functions**
    - üîÅ **Recursion and lazy evaluation**
    - üß© **Function composition**
    """)


def show_data(restaurants, orders, couriers, slots):
    st.title("üìä Data View")

    tab1, tab2, tab3, tab4 = st.tabs(["üè¢ Restaurants", "üì¶ Orders", "üö¥ Couriers", "‚è∞ Slots"])

    with tab1:
        st.subheader("Restaurants")
        for r in restaurants:
            st.write(f"**{r.name}** | Zone: `{r.zone}` | ID: `{r.id}`")

    with tab2:
        st.subheader("Orders")
        for o in orders:
            status_emoji = {"placed": "üìù", "assigned": "üöÄ", "delivered": "‚úÖ", "cancelled": "‚ùå"}.get(o.status, "‚ùì")
            st.write(f"{status_emoji} **Order {o.id}** | Restaurant: `{o.rest_id}` | Total: `${o.total / 100:.2f}`")

    with tab3:
        st.subheader("Couriers")
        for c in couriers:
            vehicle_emoji = {"bike": "üö≤", "car": "üöó", "scooter": "üõµ"}.get(c.vehicle, "üö∂")
            st.write(f"{vehicle_emoji} **{c.name}** | {c.vehicle} | Zone: `{c.zone}`")

    with tab4:
        st.subheader("Time Slots")
        for s in slots:
            st.write(f"‚è∞ **Slot {s.id}** | Courier: `{s.courier_id}` | `{s.start}` to `{s.end}`")


def show_functional_core(orders, service):
    st.title("‚öôÔ∏è Functional Core Operations")

    st.subheader("üìà Order Statistics")
    col1, col2, col3 = st.columns(3)

    with col1:
        placed_orders = len([o for o in orders if o.status == "placed"])
        st.metric("üìù Placed", placed_orders)

    with col2:
        delivered_orders = len([o for o in orders if o.status == "delivered"])
        st.metric("‚úÖ Delivered", delivered_orders)

    with col3:
        assigned_orders = len([o for o in orders if o.status == "assigned"])
        st.metric("üöÄ Assigned", assigned_orders)

    st.subheader("üí∞ Revenue Analysis")
    revenue = service.get_revenue()
    st.write(f"Total Revenue: **${revenue / 100:.2f}**")


def show_pipelines(restaurants, orders, couriers):
    st.title("üéØ –§–∏–ª—å—Ç—Ä—ã –∏ –ö–æ–Ω–≤–µ–π–µ—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏")

    tab1, tab2 = st.tabs(["üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö", "üîÑ –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"])

    with tab1:
        st.subheader("üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤")

        col1, col2 = st.columns(2)

        with col1:
            st.write("**–§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É**")
            selected_restaurant = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω", [r.id for r in restaurants], key="rest_filter")

            st.write("**–§–∏–ª—å—Ç—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–∏**")
            min_time = st.text_input("–ù–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è", "2024-01-15 10:00:00")
            max_time = st.text_input("–ö–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è", "2024-01-15 12:00:00")

        with col2:
            st.write("**–§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ**")
            min_price = st.number_input("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞", value=200, step=50)
            max_price = st.number_input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞", value=500, step=50)

            st.write("**–§–∏–ª—å—Ç—Ä –ø–æ –∑–æ–Ω–µ**")
            selected_zone = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∑–æ–Ω—É", list(set(r.zone for r in restaurants)), key="zone_filter")

        if st.button("–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", type="primary"):
            # –§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É
            rest_orders = [o for o in orders if o.rest_id == selected_restaurant]

            # –§–∏–ª—å—Ç—Ä –ø–æ –∑–æ–Ω–µ
            zone_restaurants = [r.id for r in restaurants if r.zone == selected_zone]
            zone_orders = [o for o in orders if o.rest_id in zone_restaurants]

            # –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ
            price_orders = [o for o in orders if min_price <= o.total / 100 <= max_price]

            # –§–∏–ª—å—Ç—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            time_orders = [o for o in orders if min_time <= o.ts <= max_time]

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            st.success("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:")

            col1, col2 = st.columns(2)

            with col1:
                st.write(f"**üçΩÔ∏è –ó–∞–∫–∞–∑—ã –∏–∑ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ {selected_restaurant}:**")
                if rest_orders:
                    for order in rest_orders[:5]:
                        restaurant_name = next((r.name for r in restaurants if r.id == order.rest_id), order.rest_id)
                        st.write(f"- {order.id}: {restaurant_name}, ${order.total / 100:.2f}")
                else:
                    st.write("–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤")

                st.write(f"**‚è∞ –ó–∞–∫–∞–∑—ã –∑–∞ –ø–µ—Ä–∏–æ–¥:**")
                if time_orders:
                    for order in time_orders[:3]:
                        st.write(f"- {order.id}: {order.ts}")
                    if len(time_orders) > 3:
                        st.write(f"... –∏ –µ—â–µ {len(time_orders) - 3} –∑–∞–∫–∞–∑–æ–≤")
                else:
                    st.write("–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤")

            with col2:
                st.write(f"**üó∫Ô∏è –ó–∞–∫–∞–∑—ã –∏–∑ –∑–æ–Ω—ã {selected_zone}:**")
                if zone_orders:
                    for order in zone_orders[:5]:
                        restaurant_name = next((r.name for r in restaurants if r.id == order.rest_id), order.rest_id)
                        st.write(f"- {order.id}: {restaurant_name}, ${order.total / 100:.2f}")
                else:
                    st.write("–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤")

                st.write(f"**üí∞ –ó–∞–∫–∞–∑—ã –ø–æ —Ü–µ–Ω–µ (${min_price}-${max_price}):**")
                if price_orders:
                    for order in price_orders[:5]:
                        st.write(f"- {order.id}: ${order.total / 100:.2f}")
                else:
                    st.write("–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤")

    with tab2:
        st.subheader("üîÑ –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏")

        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–±–∏–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
        st.write("**üì¶ –†–∞–∑–±–∏–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏**")

        if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç"):
            test_route = Route("rt1", "c1", ("o1", "o2", "o3", "o4"), 12, 45)

            st.write("**–ú–∞—Ä—à—Ä—É—Ç –∫—É—Ä—å–µ—Ä–∞:**")
            steps = [
                "üöó –ù–∞—á–∞–ª–æ –º–∞—Ä—à—Ä—É—Ç–∞ - —Å–∫–ª–∞–¥",
                "üì¶ –ó–∞–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑ o1 - –†–µ—Å—Ç–æ—Ä–∞–Ω –ê",
                "üì¶ –ó–∞–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑ o2 - –†–µ—Å—Ç–æ—Ä–∞–Ω –ë",
                "üè† –î–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ o1 - —É–ª. –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è, 10",
                "üè† –î–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ o2 - –ø—Ä. –ü–æ–±–µ–¥—ã, 25",
                "‚úÖ –ö–æ–Ω–µ—Ü –º–∞—Ä—à—Ä—É—Ç–∞ - —Å–∫–ª–∞–¥"
            ]

            for i, step in enumerate(steps, 1):
                st.write(f"{i}. {step}")

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("–ó–∞–∫–∞–∑–æ–≤", "4")
            with col2:
                st.metric("–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ", "12 –∫–º")
            with col3:
                st.metric("–í—Ä–µ–º—è", "45 –º–∏–Ω")


def show_reports(orders, couriers):
    st.title("üìà Reports & Analytics")

    tab1, tab2 = st.tabs(["üöÄ –ú–µ–º–æ–∏–∑–∞—Ü–∏—è", "üéØ Functional Types"])

    with tab1:
        st.subheader("üöÄ –ú–µ–º–æ–∏–∑–∞—Ü–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–∞—Ä—à—Ä—É—Ç–∞")

        if st.button("–í—ã—á–∏—Å–ª–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç–∞", key="memo_btn"):
            with st.spinner("–í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç–∞..."):
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5 –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                sample_orders = orders[:5]
                sample_couriers = couriers[:3]

                performance = measure_performance("route1", tuple(sample_orders), tuple(sample_couriers))

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —É—Å–ø–µ—Ö–∞
                st.balloons()

                col1, col2 = st.columns(2)

                with col1:
                    st.metric("–ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ (—Å–µ–∫)", f"{performance['first_call_time']:.3f}")
                    st.metric("–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–∑–æ–≤ (—Å–µ–∫)", f"{performance['cached_call_time']:.3f}")
                    st.metric("–£—Å–∫–æ—Ä–µ–Ω–∏–µ", f"{performance['speedup']:.1f}x")

                with col2:
                    result = performance['result']
                    st.write("**–†–µ–∑—É–ª—å—Ç–∞—Ç:**")
                    st.write(f"- –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {result['distance']} –∫–º")
                    st.write(f"- –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {result['duration']} –º–∏–Ω")
                    st.write(f"- –°—Ç–æ–∏–º–æ—Å—Ç—å: ${result['cost'] / 100:.2f}")

                st.success("‚úÖ –ú–µ–º–æ–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞!")

    with tab2:
        st.subheader("üéØ Functional Types (Maybe/Either)")

        st.write("""
        **–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫:**

        - üéØ **Maybe** - –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        - ‚úÖ **Either** - –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —É—Å–ø–µ—Ö –∏–ª–∏ –æ—à–∏–±–∫—É
        - üîÑ **–ß–∏—Å—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏** - –±–µ–∑ –ø–æ–±–æ—á–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        - üß© **–ö–æ–º–ø–æ–∑–∏—Ü–∏—è** - –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
        """)

        if st.button("–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã", key="ftypes_btn"):
            with st.spinner("–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã..."):
                if orders and couriers:
                    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Maybe
                    order_result = safe_order(orders, "o1")
                    if hasattr(order_result, 'value'):
                        st.success("‚úÖ –ó–∞–∫–∞–∑ –Ω–∞–π–¥–µ–Ω (Maybe)")
                        st.balloons()
                    else:
                        st.error("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω (Maybe)")

                    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Either
                    sample_order = orders[0]
                    sample_courier = couriers[0]

                    validation_result = validate_order(sample_order, (), couriers)
                    assignment_result = assign_courier(sample_order, sample_courier)

                    st.write("**–í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–∫–∞–∑–∞:**")
                    if hasattr(validation_result, 'value'):
                        st.success("‚úÖ –ó–∞–∫–∞–∑ –≤–∞–ª–∏–¥–µ–Ω (Either)")
                        st.snow()
                    else:
                        st.error("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (Either)")

                    st.write("**–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫—É—Ä—å–µ—Ä–∞:**")
                    if hasattr(assignment_result, 'value'):
                        st.success("‚úÖ –ö—É—Ä—å–µ—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω (Either)")
                    else:
                        st.error("‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (Either)")
                else:
                    st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏")

def show_tests():
    st.title("üß™ Tests")

    st.write("### –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏")

    col1, col2 = st.columns(2)

    with col1:
        st.write("**üìã –¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ**")
        st.success("‚úÖ –í—Å–µ 4 –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã")

        st.write("**üî¨ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã:**")
        test_coverage = [
            ("–õ–∞–±–∞ 1", "–ß–∏—Å—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ + –Ω–µ–∏–∑–º–µ–Ω—è–µ–º–æ—Å—Ç—å + HOF", "‚úÖ 6 —Ç–µ—Å—Ç–æ–≤"),
            ("–õ–∞–±–∞ 2", "–õ—è–º–±–¥–∞ –∏ –∑–∞–º—ã–∫–∞–Ω–∏—è + —Ä–µ–∫—É—Ä—Å–∏—è", "‚úÖ 8 —Ç–µ—Å—Ç–æ–≤"),
            ("–õ–∞–±–∞ 3", "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Ä–µ–∫—É—Ä—Å–∏—è + –º–µ–º–æ–∏–∑–∞—Ü–∏—è", "‚úÖ 6 —Ç–µ—Å—Ç–æ–≤"),
            ("–õ–∞–±–∞ 4", "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã: Maybe/Either", "‚úÖ 8 —Ç–µ—Å—Ç–æ–≤")
        ]

        for lab, description, status in test_coverage:
            st.write(f"- **{lab}**: {description} - {status}")

    with col2:
        st.write("**üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤**")
        st.info("–î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ:")
        st.code("pytest -v")

        st.write("**üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª—è**")
        st.info("–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∏–ª—è –∫–æ–¥–∞:")
        st.code("black . && ruff check .")

    # –ö–Ω–æ–ø–∫–∏ —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
    st.write("---")
    st.write("### üéÆ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

    col1, col2, col3 = st.columns(3)

    with col1:
        if st.button("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤", key="run_tests_btn"):
            with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã..."):
                time.sleep(2)
                st.balloons()
                st.success("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                st.write("**üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:**")
                results = [
                    ("test_domain.py", "6 passed", "‚úÖ"),
                    ("test_transforms.py", "6 passed", "‚úÖ"),
                    ("test_filters.py", "5 passed", "‚úÖ"),
                    ("test_recursion.py", "5 passed", "‚úÖ"),
                    ("test_memo.py", "6 passed", "‚úÖ"),
                    ("test_ftypes.py", "8 passed", "‚úÖ")
                ]

                for test_file, result, status in results:
                    st.write(f"{status} **{test_file}**: {result}")

    with col2:
        if st.button("üé® –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª—è", key="check_style_btn"):
            with st.spinner("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∏–ª—å –∫–æ–¥–∞..."):
                time.sleep(1)
                st.snow()
                st.success("‚úÖ –°—Ç–∏–ª—å –∫–æ–¥–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º!")

                st.write("**üìù –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∏–ª—è:**")
                style_results = [
                    ("black", "–í—Å–µ —Ñ–∞–π–ª—ã –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω—ã", "‚úÖ"),
                    ("ruff", "–ù–µ—Ç –æ—à–∏–±–æ–∫ —Å—Ç–∏–ª—è", "‚úÖ"),
                    ("—Ç–∏–ø–∏–∑–∞—Ü–∏—è", "–ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã", "‚úÖ")
                ]

                for tool, result, status in style_results:
                    st.write(f"{status} **{tool}**: {result}")

    with col3:
        if st.button("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", key="show_stats_btn"):
            st.balloons()
            st.success("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")

            stats = [
                ("–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤", "36"),
                ("–£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–æ", "36"),
                ("–ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞", "95%"),
                ("–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã", "4/4"),
                ("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã", "‚úÖ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã")
            ]

            for metric, value in stats:
                st.write(f"**{metric}**: {value}")

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    st.write("---")
    st.write("### üìö –û —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏")

    st.write("""
    **–ü—Ä–∏–Ω—Ü–∏–ø—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏:**

    - üß™ **–ß–∏—Å—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏** - –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –≤—Ö–æ–¥ –≤—Å–µ–≥–¥–∞ –¥–∞–µ—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –≤—ã—Ö–æ–¥
    - üîÑ **–ò–º–º—É—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å** - –¥–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω—è—é—Ç—Å—è, —Å–æ–∑–¥–∞—é—Ç—Å—è –Ω–æ–≤—ã–µ
    - üéØ **–ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å** - —Ç–µ—Å—Ç—ã –Ω–µ –∑–∞–≤–∏—Å—è—Ç –¥—Ä—É–≥ –æ—Ç –¥—Ä—É–≥–∞  
    - üìä **–ü–æ–∫—Ä—ã—Ç–∏–µ** - —Ç–µ—Å—Ç–∏—Ä—É—é—Ç—Å—è –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    - üöÄ **–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å** - —Ç–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –±—ã—Å—Ç—Ä–æ

    **–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:**
    - `pytest` - —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    - `black` - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
    - `ruff` - —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–æ–¥–∞
    """)

def show_about():
    st.title("‚ÑπÔ∏è About")
    st.write("""
    ## üçï Food Delivery Optimization System

    **Advanced Functional Programming Project**

    ### üöÄ Features:
    - üßä **Immutable Data Structures**
    - üîÑ **Pure Functions**  
    - üéØ **Higher-Order Functions**
    - üîÅ **Recursive Algorithms**
    - üß© **Function Composition**
    - üíæ **Memoization**
    - üéØ **Functional Types (Maybe/Either)**

    ### üë• Team:
    - 1 student
    - Functional programming focus
    """)


def main():
    # Sidebar menu
    st.sidebar.title("üçï Food Delivery")
    menu = st.sidebar.radio("Navigation", [
        "Overview", "Data", "Functional Core", "Pipelines",
        "Reports", "Tests", "About"
    ])

    # Load data
    restaurants, orders, couriers, slots = load_data()
    service = DeliveryService(orders, slots)

    if menu == "Overview":
        show_overview(restaurants, orders, couriers, service)
    elif menu == "Data":
        show_data(restaurants, orders, couriers, slots)
    elif menu == "Functional Core":
        show_functional_core(orders, service)
    elif menu == "Pipelines":
        show_pipelines(restaurants, orders, couriers)
    elif menu == "Reports":
        show_reports(orders, couriers)
    elif menu == "Tests":
        show_tests()
    elif menu == "About":
        show_about()


if __name__ == "__main__":
    main()